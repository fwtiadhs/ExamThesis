@model IEnumerable<ExamThesis.Storage.ExamQuestionViewModel>

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootswatch@5.3.3/dist/litera/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/exam.css" />
}

<div class="container py-4">

    <div class="exam-header mb-4">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-4">
            <div>
                <h2 class="mb-2">Εξέταση Εργαστηρίου</h2>
                <div class="opacity-75">@ViewBag.ExamName</div>
            </div>
            <div class="text-md-end w-100" style="max-width:320px;">
                <div class="timer-display">Χρόνος: <span id="timer">--:--:--</span></div>
                <div class="timer-progress"><div id="timerBar" class="bg-success" style="width:0%"></div></div>
            </div>
        </div>
    </div>

    <form method="post" action="@Url.Action("Submit", new { id = ViewBag.ExamId })" id="examForm">
        <input type="hidden" name="userId" value="@ViewBag.UserId" />
        <input type="hidden" name="examId" value="@ViewBag.ExamId" />

        <div class="row g-4">
            <div class="col-lg-4 col-xl-3">
                <div class="files-card card mb-4">
                    <div class="card-header bg-transparent fw-semibold">Αρχεία</div>
                    <div class="card-body">
                        @{
                            var packages = Model
                                .GroupBy(m => m.PackageId)
                                .Select(g => g.First())
                                .Where(p => p.PackageId.HasValue) // ignore null package ids
                                .ToList();
                        }
                        @foreach (var pkg in packages)
                        {
                            if (pkg.FileData != null && pkg.FileData.Length > 0)
                            {
                                <div class="d-flex align-items-center gap-2 mb-2">
                                    <button type="button"
                                            class="btn btn-outline-primary btn-sm px-3 pkg-view"
                                            data-pkg-id="@pkg.PackageId"
                                            data-pkg-name="@pkg.PackageName">
                                        @pkg.PackageName
                                    </button>
                                    <a class="btn btn-link btn-sm text-decoration-none"
                                       href="@Url.Action("Download", "QuestionPackage", new { id = pkg.PackageId })">
                                        Download
                                    </a>
                                </div>
                            }
                            else
                            {
                                @* Option A: skip entirely *@
                                @* continue; *@

                                @* Option B: show disabled label so students know there’s no file *@
                                <div class="d-flex align-items-center gap-2 mb-2">
                                    <button type="button" class="btn btn-outline-secondary btn-sm px-3" disabled>
                                        @pkg.PackageName (no file)
                                    </button>
                                </div>
                            }
                        }
                    </div>
                </div>
                <div class="card">
                    <div class="card-body d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Submit Answers</button>
                        <button type="button" class="btn btn-outline-danger" id="finalSubmitBtn">Οριστική Υποβολή</button>
                    </div>
                </div>
            </div>

            <div class="col-lg-8 col-xl-9 question-wrapper">
                @{
                    int questionCounter = 1;
                    char[] answerLetters = "abcdefghijklmnopqrstuvwxyz".ToCharArray();
                }
                @foreach (var question in Model)
                {
                    <div class="card question-card mb-4">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2 flex-wrap gap-2">
                                <h6 class="card-title mb-0"><span class="badge bg-secondary me-2">@questionCounter)</span>@question.QuestionText</h6>
                                <span class="badge bg-info text-dark align-self-start">@question.QuestionPoints βαθμοί</span>
                            </div>

                            @if (question.ImageData != null && question.ImageData.Length > 0)
                            {
                                var ext = (question.ImageType ?? "").ToLower();
                                var mime = ext switch
                                {
                                    ".jpg" or ".jpeg" => "image/jpeg",
                                    ".png" => "image/png",
                                    ".gif" => "image/gif",
                                    ".bmp" => "image/bmp",
                                    _ => "application/octet-stream"
                                };
                                var b64 = Convert.ToBase64String(question.ImageData);
                                <div class="text-center mb-3">
                                    <img src="data:@mime;base64,@b64" alt="Question image" class="img-fluid rounded border" style="max-height:240px;object-fit:contain;" />
                                </div>
                            }

                            <div class="row g-3 answer-group mt-1">
                                @{
                                    int answerCounter = 0;
                                    char[] letters = "abcdefghijklmnopqrstuvwxyz".ToCharArray();
                                }
                                @foreach (var answer in question.Answers)
                                {
                                    <div class="col-md-6 col-xl-4">
                                        <div class="form-check">
                                            <input class="form-check-input answer-checkbox" type="checkbox" id="q@question.QuestionId_a@answer.Id" name="selectedAnswers" value="@answer.Id" data-question-id="@question.QuestionId" />
                                            <label class="form-check-label" for="q@question.QuestionId_a@answer.Id">
                                                <span class="me-1 text-primary fw-semibold">@letters[answerCounter])</span>@answer.Text
                                            </label>
                                        </div>
                                    </div>
                                    answerCounter++;
                                }
                            </div>
                            <div class="negative-note mt-3">Αρνητική βαθμολογία: @question.NegativePoints</div>
                        </div>
                    </div>
                    <input type="hidden" name="selectedQuestions" value="@question.QuestionId" />
                    questionCounter++;
                }

                <div class="submit-zone text-end mt-4">
                    <button type="submit" class="btn btn-lg btn-primary px-5">Submit Answers</button>
                </div>
            </div>
        </div>
    </form>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>window.examEndTime='@ViewBag.EndTime';</script>
<script src="~/js/exam.js"></script>


