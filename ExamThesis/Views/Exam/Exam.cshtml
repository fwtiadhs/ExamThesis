@model IEnumerable<ExamThesis.Storage.ExamQuestionViewModel>

<div class="container">
<h2>Exam Questions</h2>
    <form method="post" action="@Url.Action("Submit", new { id = ViewBag.ExamId })">
        <input type="hidden" name="userId" value="@ViewBag.UserId" />
        <div class="p-3">
            <p>Χρόνος απομένων: <span id="timer"></span></p>
        </div>
        <input type="hidden" name="examId" value="@ViewBag.ExamId" />
        @foreach (var question in Model)
{
    <div class="card mb-3">
        <div class="card-body">
            <h6 class="card-title">@question.QuestionText</h6>
            <br />
            <div class="row">
                @foreach (var answer in question.Answers)
                {
                    <div class="col-md-4 mb-3">
                        <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="answer_@answer.Id" name="selectedAnswers" value="@answer.Id">
                                    <label class="form-check-label" for="answer_@answer.Id">@answer.Text</label>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
<div style="clear:both"></div>
    <button type="submit" class="btn btn-primary">Submit Answers</button>
    </form>
</div>

<script>
    // Ορίζουμε την ώρα εκκίνησης και λήξης
    var firstItem = Model[0]; // Παίρνουμε το πρώτο στοιχείο από τον πίνακα Model
    if (firstItem != null && firstItem.StartTime != null && firstItem.EndTime != null) {
        var startTime = new Date(firstItem.StartTime);
        var endTime = new Date(firstItem.EndTime);
    }

    // Συνάρτηση για να ενημερώνει τον χρόνο στο UI
    function updateTimer() {
        var currentTime = new Date();
        var timeDifference = endTime - currentTime;

        if (timeDifference <= 0) {
            clearInterval(timerInterval);
            document.getElementById('timer').innerText = 'Ο χρόνος έχει λήξει!';
            return;
        }

        var minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

        document.getElementById('timer').innerText = minutes + "m " + seconds + "s ";
    }

    // Καλούμε τη συνάρτηση κάθε δευτερόλεπτο
    var timerInterval = setInterval(updateTimer, 1000);

    // Αποθηκεύει τα δεδομένα στον τοπικό αποθηκευτικό χώρο για ένα συγκεκριμένο UserId
    function saveDataToLocalStorage(userId, data) {
        const existingData = loadDataFromLocalStorage(userId) || {};
        existingData.examData = data;
        localStorage.setItem(userId, JSON.stringify(existingData));
    }

    // Φορτώνει τα δεδομένα από τον τοπικό αποθηκευτικό χώρο για ένα συγκεκριμένο UserId
    function loadDataFromLocalStorage(userId) {
        const data = localStorage.getItem(userId);
        return data ? JSON.parse(data).examData : null;
    }

    // Διαγράφει τα δεδομένα από τον τοπικό αποθηκευτικό χώρο για ένα συγκεκριμένο UserId
    function clearLocalStorage(userId) {
        localStorage.removeItem(userId);
    }

</script>
